name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run black
      run: black --check --diff src tests
    
    - name: Run isort
      run: isort --check-only --diff src tests
    
    - name: Run flake8
      run: flake8 src tests
    
    - name: Run mypy
      run: mypy src --ignore-missing-imports

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,http]"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --junitxml=junit/unit-test-results.xml \
          --cov=src \
          --cov-report=xml:coverage-unit.xml \
          --cov-report=html:htmlcov-unit \
          -v
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          junit/unit-test-results.xml
          coverage-unit.xml
          htmlcov-unit/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-unit.xml
        flags: unit
        name: unit-tests
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: test_mcp_pa
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,http]"
    
    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U test_user -d test_mcp_pa
        redis-cli -h localhost -p 6379 ping
    
    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_mcp_pa"
        export REDIS_URL="redis://localhost:6379"
        export ENVIRONMENT="testing"
        export AUTH_ENABLED="false"
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_mcp_pa
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
        AUTH_ENABLED: false
      run: |
        pytest tests/integration/ \
          --junitxml=junit/integration-test-results.xml \
          --cov=src \
          --cov-report=xml:coverage-integration.xml \
          --cov-report=html:htmlcov-integration \
          -v --timeout=60
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          junit/integration-test-results.xml
          coverage-integration.xml
          htmlcov-integration/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-integration.xml
        flags: integration
        name: integration-tests
        fail_ci_if_error: false

  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,http]"
    
    - name: Run performance tests
      env:
        ENVIRONMENT: testing
        AUTH_ENABLED: false
      run: |
        pytest tests/performance/ \
          --junitxml=junit/performance-test-results.xml \
          --benchmark-json=benchmark-results.json \
          --benchmark-only \
          -v --timeout=120
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          junit/performance-test-results.xml
          benchmark-results.json
    
    - name: Performance regression check
      run: |
        python scripts/check_performance_regression.py benchmark-results.json
      continue-on-error: true

  docker-test:
    runs-on: ubuntu-latest
    name: Docker Integration Test
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t mcp-pa-test .
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
    
    - name: Test Docker deployment
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test MCP initialization
        curl -f -X POST http://localhost:8000/mcp/initialize \
          -H "Content-Type: application/json" \
          -d '{}'
    
    - name: Check logs
      if: failure()
      run: |
        docker-compose logs mcp-server
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install bandit
      run: pip install bandit[toml]
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  test-matrix:
    runs-on: ${{ matrix.os }}
    name: Test Matrix (${{ matrix.os }} - Python ${{ matrix.python-version }})
    if: github.event_name == 'schedule' # Only run matrix on scheduled builds
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce build time
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,http]"
    
    - name: Run core unit tests
      run: |
        pytest tests/unit/test_models.py tests/unit/test_embedding_service.py \
          --junitxml=junit/matrix-test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml \
          -v
    
    - name: Upload matrix test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: matrix-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: junit/matrix-test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml

  coverage-report:
    runs-on: ubuntu-latest
    name: Coverage Report
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install coverage tools
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml]
    
    - name: Combine coverage reports
      run: |
        coverage combine unit-test-results/coverage-unit.xml integration-test-results/coverage-integration.xml || true
        coverage report --show-missing || true
        coverage html -d htmlcov-combined || true
    
    - name: Upload combined coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: combined-coverage-report
        path: htmlcov-combined/
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: orgoro/coverage@v3
      with:
        coverageFile: coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        thresholdAll: 0.8
        thresholdNew: 0.9
        thresholdModified: 0.9